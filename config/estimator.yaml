type: "discrete_ekf"
pub_rate: 300.0 # Hz
measurement_timeout_threshold: 2.0 # seconds
max_callback_rate: 400

# initial state
initial_state:
  type: "pacejka_car"
  value: [0.15, -1.05, 0, 0.5, 0, 0]

initial_input:
  type: "pacejka_car"
  value: [0.0, 0.15]

# initial P (state covariance matrix)
P_init:
  value: [
      [0.1, 0, 0, 0, 0, 0],
      [0, 0.1, 0, 0, 0, 0],
      [0, 0, 0.1, 0, 0, 0],
      [0, 0, 0, 0.1, 0, 0], # NOTE(@naefjo): maybe set to 1.
      [0, 0, 0, 0, 0.1, 0], # Ditto. I put 0.1 since we do not have any other direct
      [0, 0, 0, 0, 0, 1],   # estimate of v_x,y
    ]
  is_diag: false

model:
  Q:
    value:
      [
        [0.00001, 0, 0, 0, 0, 0],
        [0, 0.00001, 0, 0, 0, 0],
        [0, 0, 0.00001, 0, 0, 0],
        [0, 0, 0, .01, 0, 0],
        [0, 0, 0, 0, .001, 0],
        [0, 0, 0, 0, 0, .1],
      ]
    is_diag: false

# ============ SENSORS ============
sensors:
  sensor_names: ["vicon", "imu_yaw_rate", "wheel_encoders"] # options: ["vicon", "imu", ,"imu_yaw_rate" "wheel_encoders"]
  vicon:
    R:
      value: [[0.00003], [0.00003], [0.00003]]
      is_diag: true
    key: vicon # optional, if not set us e name of sensor

  imu:
    R:
      value: [[100], [100], [0.0025]] # std of 0.1 m/s -> cov of 0.1 * 0.1 = 0.01
      is_diag: true
    key: imu # optional, if not set us e name of sensor

  imu_yaw_rate:
    R:
      value: [[0.001]] # std of 0.1 rad/s² -> cov of 0.1 * 0.1 = 0.01
      is_diag: true
    key: imu_yaw_rate # optional, if not set us e name of sensor

  wheel_encoders:
    R:
      value: [[0.01], [0.01], [0.01], [0.01]] # std of 0.1 rad/s -> cov of 0.1 * 0.1 = 0.01
      is_diag: true
    key: wheel_encoders # optional, if not set us e name of sensor

  # vicon:
  #   R:
  #     value: [[0.00003], [0.00003], [0.00003]]
  #     is_diag: true
  #   key: vicon # optional, if not set us e name of sensor

  # imu:
  #   R:
  #     value: [[10], [10], [0.000004]]
  #     is_diag: true
  #   key: imu # optional, if not set us e name of sensor

  # imu_yaw_rate:
  #   R:
  #     value: [[0.000004]] # std of 0.1 rad/s² -> cov of 0.1 * 0.1 = 0.01
  #     is_diag: true
  #   key: imu_yaw_rate # optional, if not set us e name of sensor


  # wheel_encoders:
  #   R:
  #     value: [[0.01], [0.01], [0.01], [0.01]] # std of 0.1 rad/s -> cov of 0.1 * 0.1 = 0.01
  #     is_diag: true
  #   key: wheel_encoders # optional, if not set us e name of sensor



# ============ VISUALIZER ============
visualizer:
  # car_ekf_visualizer will plot the covariance of the position estimate as a ellipsoid
  type: car_ekf_visualizer

  # === Parameters for Base Visualizer ===
  rate: 10
  # Visualizer specific  parameters
  frame_id: crs_frame # default
  namespace: ekf # default

  use_arrows: true # If true, use arrows to visualize planned and reference yaw angle. This option is a lot slower and may introduce visual lags

  # Color of the estimated position
  est_r: 0
  est_g: 0
  est_b: 0
  est_a: 1

  size_x: 0.05 # 0.07 for arrows
  size_y: 0.05 # 0.02 for arrows
  size_z: 0.05 # 0.02 for arrows

  # ==== Special Parameters for ekf visualizer ====

  # Color of the covariance ellipsoid
  cov_r: 0
  cov_g: 0
  cov_b: 1
  cov_a: 0.3

  cov_scale: 100 # scales covariance ellipsoid by 100
